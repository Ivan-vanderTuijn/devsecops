version: 2.1

# List of all environment variables accessible in this config file
# https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables

# Recommendations
# ---------------

# General Principles:
#
#  1. Descriptive: The job name should clearly describe what the job does.
#  2. Concise: Names should be as short as possible while still being descriptive.
#  3. Consistent: Use a consistent format or pattern for all job names.
#  4. Avoid Ambiguous Abbreviations: If you use abbreviations, ensure they are widely understood.
#
# Naming Convention Proposal:
#
#  1. Prefixes based on the nature of the job:
#     - build-: for jobs related to building or installation.
#     - lint-: for jobs related to code quality checking.
#     - test-: for jobs related to testing.
#     - security-: for jobs related to security.
#     - metrics-: for jobs related to metrics generation.
#     - deploy-: for jobs related to deployment.
#     - notify-: for jobs related to notifications.
#     - debug-: for jobs related to debugging.
#     - setup-: for jobs related to set up.
#     - init-: for jobs related to initialization.
#     - generate-: for jobs related to generation.
#     - validate-: for jobs related to validation.
#     - compile-: for jobs related to compilation.
#     - e2e-: for jobs related to end-to-end testing.
#
#  2. Suffixes based on the specific tool or task:
#  For example, for a job that uses PHP_CodeSniffer, use phpcs as a suffix.


# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.2
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost

parameters:
  environment:
    type: string
    default: "staging"
    enum: ["staging", "prod"]

jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            echo "--------------------"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace


  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.txt --report=checkstyle --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report


  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report


  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit


  build-docker-image:
    parameters:
      environment:
        type: string
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - fetch-and-set-secrets:
          env: << parameters.environment >>
      - run:
          name: Build Docker Image
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi
            
            docker build -f docker/Dockerfile -t $DOCKER_REPOSITORY:$CIRCLE_BRANCH .
            docker save $DOCKER_REPOSITORY:$CIRCLE_BRANCH | gzip > docker-image.tar.gz
      - *persist_to_workspace


  push-docker-image:
    executor: builder-executor
    steps:
      - *attach_workspace
      - setup_remote_docker:
          # version: 20.10.23
          docker_layer_caching: true
      - run:
          name: Load and Push Docker Image to GHCR
          command: |
            if [ ! -f "docker-image.tar.gz" ]; then
              echo "No image artifact found, skipping push."
              circleci step halt
              exit 0
            fi

            # Load the Docker image from the tarball
            gunzip -c docker-image.tar.gz | docker load

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Push the Docker image
            docker push $DOCKER_REPOSITORY:$CIRCLE_BRANCH


  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - run:
          name: Deploy to AWS staging environment
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $STAGING_SSH_USER@$STAGING_SSH_HOST \<< 'EOF'
            
            # Docker login
            docker login ghcr.io -u $GHCR_USERNAME --password $GHCR_PAT

            # Pull the Docker image
            echo "Pulling image: $DOCKER_REPOSITORY:$CIRCLE_BRANCH"
            docker pull $$DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
            
            # Stop and remove any existing container
            echo "Stopping existing container (if any)..."
            docker stop $PREPRODUCTION_CONTAINER_NAME || true
            docker rm $PREPRODUCTION_CONTAINER_NAME || true
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
            --name $STAGING_CONTAINER_NAME \
            -p 80:80 \
            -v "$(pwd)/volume/database:/var/www/html/database" \
            $DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
            EOF


  deploy-ssh-pre-production:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${PREPRODUCTION_SSH_FINGERPRINT}"
      - run:
          name: Deploy to AWS pre-production environment
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $PREPRODUCTION_SSH_USER@$PREPRODUCTION_SSH_HOST \<< EOF
            
            # Docker login
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin
            
            # Pull the Docker image
            echo "Pulling image: $DOCKER_REPOSITORY:$CIRCLE_BRANCH"
            docker pull $DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
            
             # Stop and remove any existing container
            echo "Stopping existing container (if any)..."
            docker stop $PREPRODUCTION_CONTAINER_NAME || true
            docker rm $PREPRODUCTION_CONTAINER_NAME || true
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
            --name "$PREPRODUCTION_CONTAINER_NAME" \
            -p 80:80 \
            -v "$(pwd)/volume/database:/var/www/html/database" \
            $DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
            EOF


  deploy-ssh-production:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${PRODUCTION_SSH_FINGERPRINT}"
      - run:
          name: Deploy to AWS production environment
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST \<< 'EOF'
            
            # Docker login
            docker login ghcr.io -u $GHCR_USERNAME --password $GHCR_PAT
            
            # Pull the Docker image
            echo "Pulling image: $DOCKER_REPOSITORY:$CIRCLE_BRANCH"
            docker pull $DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
      
            # Stop and remove any existing container
            echo "Stopping existing container (if any)..."
            docker stop $PRODUCTION_CONTAINER_NAME || true
            docker rm $PRODUCTION_CONTAINER_NAME || true
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
            --name $PRODUCTION_CONTAINER_NAME \
            -p 80:80 \
            -v "$(pwd)/volume/database:/var/www/html/database" \
            $DOCKER_REPOSITORY:$CIRCLE_BRANCH || exit 1
            EOF


  metrics-phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP Metrics
          command: composer require --dev phpmetrics/phpmetrics
      - run:
          name: Run PHP Metrics
          command: ./vendor/bin/phpmetrics --report-html=phpmetrics-report.html src/ public/
      - store_artifacts:
          path: phpmetrics-report.html
          destination: phpmetrics-report
      - store_artifacts:
          path: public
          destination: public-files


  metrics-phploc:
    executor: php-executor
    steps:
      - checkout
      - run:
          name: Download PHPLoc
          command: |
            wget -O phploc.phar https://phar.phpunit.de/phploc.phar
            chmod +x phploc.phar  
      - run:
          name: Execute PHPLoc
          command: |
            php phploc.phar src/ public/ > phploc-report.txt
      - store_artifacts:
          path: phploc-report.txt
          destination: phploc-report


  metrics-phpmd:
    executor: php-executor
    steps:
      - checkout
      - run:
          name: Download PHP Mess Detector
          command: |
            wget -c https://phpmd.org/static/latest/phpmd.phar
            chmod +x phpmd.phar  
      - run:
          name: Execute PHP Mess Detector
          command: |
            php phpmd.phar src/ public/ text cleancode,codesize,controversial,design,naming > phpmd-report.txt
      - run:
          name: Check report Creation
          command: ls -l
      - store_artifacts:
          path: phpmd-report.txt
          destination: phpmd-report


  metrics-php-doc-check:
    executor: php-executor
    steps:
      - checkout
      - run:
          name: Download PHP Doc Check
          command: |
            wget -c https://github.com/Niels-NTG/php-doc-check/releases/latest/download/php-doc-check.phar -O php-doc-check.phar
            chmod +x php-doc-check.phar
      - run:
          name: Execute PHP Doc Check
          command: |
            php php-doc-check.phar src/ --verbose > php-doc-check-report.txt
            echo "php-doc-check finished with exit code $?" >> php-doc-check-report.txt
            if [ ! -s php-doc-check-report.txt ]; then
              echo "No problems detected or empty file. php-doc-check was executed successfully." > php-doc-check-report.txt
            fi
      - run:
          name: check report creation
          command: ls -l
      - store_artifacts:
          path: php-doc-check-report.txt
          destination: php-doc-check-report

commands:
  fetch-and-set-secrets:
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Fetch secrets and update .env
          command: |
            # Fetch the APP_SECRET for the specified environment
            ENVIRONMENT=<< parameters.env >>
            RESPONSE=$(curl --silent --request GET \
              --url "https://us.infisical.com/api/v3/secrets/raw/APP_SECRET?environment=${ENVIRONMENT}&workspaceSlug=${WORKSPACE_SLUG}" \
              --header "Authorization: Bearer ${INFISICAL_TOKEN}")
          
            APP_SECRET=$(echo "$RESPONSE" | jq -r '.secret.secretValue')
            
            # Override APP_SECRET in .env file
            echo "APP_SECRET=\"$APP_SECRET\"" > .env

staging_and_above: &staging_and_above
  filters:
    branches:
      only:
       - /^feature\/.*/
       - dev
       - main
       - /^release\/.*/

staging_and_dev: &staging_and_dev
  filters:
    branches:
      only:
        - /^feature\/.*/
        - dev

dev_and_above: &dev_and_above
  filters:
    branches:
      only:
        - dev
        - main
        - /^release\/.*/

dev_only: &dev_only
  filters:
    branches:
      only: dev

main_and_above: &main_and_above
  filters:
    branches:
      only:
        - main
        - /^release\/.*/

main_only: &main_only
  filters:
    branches:
      only: main

release_only: &release_only
  filters:
    branches:
      only: /^release\/.*/

workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - lint-phpcs:
          <<: *staging_and_dev
          requires:
            - build-setup
      - test-phpunit:
          <<: *staging_and_above
          requires:
            - build-setup
      - security-check-dependencies:
          <<: *dev_and_above
          requires:
            - test-phpunit
      # Metrics jobs in parallel
      - metrics-phpmetrics:
          <<: *dev_only
          requires:
            - security-check-dependencies
      - metrics-phploc:
          <<: *dev_only
          requires:
            - security-check-dependencies
      - metrics-phpmd:
          <<: *dev_only
          requires:
            - security-check-dependencies
      - metrics-php-doc-check:
          <<: *dev_only
          requires:
            - security-check-dependencies
      - build-docker-image:
          name: build-docker-image-staging
          environment: staging
          <<: *dev_only
          requires:
            - metrics-phpmd
            - metrics-phploc
            - metrics-phpmetrics
            - metrics-php-doc-check
      - build-docker-image:
          name: build-docker-image-prod
          environment: prod
          <<: *main_and_above
          requires:
            - security-check-dependencies
      - push-docker-image: # Splitting the build and push to docker jobs
          name: push-docker-image-staging
          <<: *dev_only
          requires:
            - build-docker-image-staging
      - push-docker-image: # Splitting the build and push to docker jobs
          name: push-docker-image-prod
          <<: *main_and_above
          requires:
            - build-docker-image-prod
      - hold:
          type: approval
      - deploy-ssh-staging:
          <<: *dev_only
          requires:
            - push-docker-image-staging
            - hold
      - deploy-ssh-pre-production: # main branch is used to resolve the issue if 2 PRs are merged at the same time on main (~HEAD changed between the build and the merge)
          <<: *main_only
          requires:
            - push-docker-image-prod
            - hold
      - deploy-ssh-production:
          <<: *release_only
          requires:
            - push-docker-image-prod
            - hold

  # container_workflow:
  #   jobs:
  #     - build-docker-image:
  #         filters:
  #           branches:
  #             only:
  #               - main
  #               - dev
  #               - /^release\/.*/
  #               - /^hotfix\/.*/
  #               - /^bugfix\/.*/